#include <iostream>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>
#include "..\glut.h"
#define _CRT_SECURE_NO_WARNINGS

#define dim 500

using namespace std;

unsigned char prevKey;
unsigned button;
unsigned state;
int click_start_x = -100;
int click_start_y = -100;
int window_length = 500, window_height = 500;

double base_xl = -0.9;
double base_yu = 0.9;
double base_xr = 0.9;
double base_yd = -0.9;
double eps = 0.1;

class GrilaCarteziana {
private:
	unsigned num_lines, num_columns;
	double square_y_size;
	double square_x_size;
	int border = 1;
	double r, rx, ry;
	tuple<double, double> pixels[1000][1000]; // hardcoding things is bad
	vector<tuple<int, int, int, int>> saved_plots;
	void save_pixels(int lines, int columns) {
		for (int i = 0; i <= lines; ++i) {
			for (int j = 0; j <= columns; ++j) {
				tuple<double, double> tp;
				get<0>(tp) = base_xl + i * square_x_size;
				get<1>(tp) = base_yu - j * square_y_size;
				pixels[i][j] = tp;
			}
		}
	}

public:

	bool saved_pixels = false;
	GrilaCarteziana(int n_lines, int n_columns)
		: num_columns(n_columns), num_lines(n_lines)
	{
	}

	void set_border(int x) {
		border = x;
	}

	tuple<int, int> is_valid_pixel(double x, double y)
	{
		save_pixels(num_lines, num_columns);

		tuple<int, int> retval;
		get<0>(retval) = -1;
		get<1>(retval) = -1;
		for (int i = 0; i <= num_lines; ++i)
		{
			for (int j = 0; j <= num_columns; ++j)
			{
				tuple<double, double> tp = pixels[i][num_columns - j];
				double test_x = get<0>(tp);
				double test_y = get<1>(tp);


				if (((x - test_x) * (x - test_x) + (y - test_y) * (y - test_y)) < rx * ry) {
					get<0>(retval) = i;
					get<1>(retval) = j;
					return retval;
				}
			}
		}
		return retval;
	}

	/**
	* Draws a circle.
	* @param i line.
	* @param j column.
	*/
	void fire_pixel(int i, int j) {
		if ((i < 0 || j < 0) || (j > num_lines || i > num_columns))
			return;

		int num_segments = 100;
		double adjustment_x = base_xl + i * square_x_size;
		double adjustment_y = base_yd + j * square_y_size;

		//        cout <<"{" << i << "}{" << j << "}" << endl;
		glBegin(GL_TRIANGLE_FAN);
		for (int ii = 0; ii < num_segments; ii++)
		{
			glColor3f(0.0f, 0.0f, 0.0f);
			float theta = 2.0f * 3.1415926f * float(ii) / float(num_segments);//get the current angle
			float x = rx * cosf(theta);//calculate the x component
			float y = ry * sinf(theta);//calculate the y component

			glVertex2f(x + adjustment_x, y + adjustment_y);
		}
		glEnd();
	}

	void draw_grid() {

		glPushMatrix();
		glLoadIdentity();

		double square_screen_y_size = ((2 - 2 * eps) / (num_lines - 1)) * (1 - 0.5 * eps) * glutGet(GLUT_WINDOW_HEIGHT);
		double square_screen_x_size = ((2 - 2 * eps) / (num_columns - 1)) * (1 - 0.5 * eps) * glutGet(GLUT_WINDOW_WIDTH);

		if (square_screen_x_size < square_screen_y_size)
			square_x_size = square_screen_x_size / glutGet(GLUT_WINDOW_WIDTH),
			square_y_size = square_screen_x_size / glutGet(GLUT_WINDOW_HEIGHT);
		else
			square_x_size = square_screen_y_size / glutGet(GLUT_WINDOW_WIDTH),
			square_y_size = square_screen_y_size / glutGet(GLUT_WINDOW_HEIGHT);


		base_yu = base_yd + num_lines * square_y_size;
		base_xr = base_xl + num_columns * square_x_size;

		rx = square_x_size / 3.0;
		ry = square_y_size / 3;

		cout << num_lines * min(square_x_size, square_y_size) << endl;
		cout << "base_xr " << base_xr << endl;
		cout << base_yd << endl;

		save_pixels(num_lines, num_columns);
		saved_pixels = true;
		glColor3f(.0f, .0f, .0f);
		glBegin(GL_LINES);
		for (int i = 0; i <= num_lines; ++i) {
			glVertex2f(base_xl, base_yd + i * square_y_size);
			glVertex2f(base_xr, base_yd + i * square_y_size);
		}
		glEnd();

		glColor3f(.0f, .0f, .0f);
		glBegin(GL_LINES);
		for (int i = 0; i <= num_columns; ++i) {
			glVertex2f(base_xl + i * square_x_size, base_yu);
			glVertex2f(base_xl + i * square_x_size, base_yd);
		}
		glEnd();

	}

	void draw_grid2() {
		glPushMatrix();
		glLoadIdentity();
	}

	void save_plot(int x0, int y0, int x1, int y1) {
		tuple<int, int, int, int> tp;
		get<0>(tp) = x0;
		get<1>(tp) = y0;
		get<2>(tp) = x1;
		get<3>(tp) = y1;
		saved_plots.push_back(tp);
	}

	void draw_saved_plots() {
		for (int i = 0; i < saved_plots.size(); ++i) {
			tuple<int, int, int, int> tp = saved_plots[i];
			int x0 = get<0>(tp);
			int y0 = get<1>(tp);
			int x1 = get<2>(tp);
			int y1 = get<3>(tp);

			plot_line(x0, y0, x1, y1);
			cout << "drawed ==> " << endl;
			cout << x0 << " " << y0 << " " << x1 << " " << y1 << endl;
			cout << "[/drawed]" << endl;
		}
	}

	void plot_line_low(int x0, int y0, int x1, int y1) {
		glColor3f(1.0, 0.0, 0.0);
		glLineWidth(5);
		glBegin(GL_LINES);
		glVertex2f(base_xl + x0 * square_x_size, base_yd + y0 * square_y_size);
		glVertex2f(base_xl + x1 * square_x_size, base_yd + y1 * square_y_size);
		glEnd();
		glLineWidth(1);


		int dx = x1 - x0;
		int dy = y1 - y0;
		int yi = 1;

		if (dy < 0)
		{
			yi = -1;
			dy = -dy;
		}
		int D = 2 * dy - dx;
		int y = y0;

		for (int x = x0; x <= x1; x += 1) {
			for (int i = 1; i <= border / 2; i++) {
				fire_pixel(x, y + i);
				fire_pixel(x, y - i);
			}
			//if border is 1, we still need to draw pixel (x,y)
			fire_pixel(x, y);
			if (D > 0) {
				y = y + yi;
				D = D - 2 * dx;
			}
			D = D + 2 * dy;
		}
	}

	void plot_line_high(int x0, int y0, int x1, int y1)
	{
		glColor3f(1.0, 0.0, 0.0);
		glLineWidth(5);
		glBegin(GL_LINES);
		glVertex2f(base_xl + x0 * square_x_size, base_yd + y0 * square_y_size);
		glVertex2f(base_xl + x1 * square_x_size, base_yd + y1 * square_y_size);
		glEnd();
		glLineWidth(1);

		int dx = x1 - x0;
		int dy = y1 - y0;
		int xi = 1;
		if (dx < 0) {
			xi = -1;
			dx = -dx;
		}
		int D = 2 * dx - dy;
		int x = x0;

		for (double y = y0; y <= y1; y += 1) {
			for (int i = 1; i <= border / 2; i++) {
				fire_pixel(x + i, y);
				fire_pixel(x - i, y);
			}
			//if border is 1, we still need to draw pixel (x,y)
			fire_pixel(x, y);
			if (D > 0) {
				x = x + xi;
				D = D - 2 * dy;
			}
			D = D + 2 * dx;
		}
	}

	void plot_line(int x0, int y0, int x1, int y1) {
		if (abs(y1 - y0) < abs(x1 - x0))
			if (x0 > x1)
				plot_line_low(x1, y1, x0, y0);
			else
				plot_line_low(x0, y0, x1, y1);
		else
			if (y0 > y1)
				plot_line_high(x1, y1, x0, y0);
			else
				plot_line_high(x0, y0, x1, y1);
	}
};

GrilaCarteziana gc(15, 15);

void Display1() {
	glColor3f(1.0, 0.1, 0.1);
	gc.draw_grid();
	gc.plot_line(0, 0, 15, 7);
	gc.set_border(3);
	gc.plot_line(0, 15, 15, 10);
	gc.draw_saved_plots();
	gc.set_border(1);

}

void Display(void) {
	switch (prevKey) {
	case '1':
		glClear(GL_COLOR_BUFFER_BIT);
		Display1();
	default:
		break;
	}
	glFlush();
}

void Init(void) {
	glClearColor(1, 1, 1, 1);
	glLineWidth(1);
	//   glPointSize(3);
	glPolygonMode(GL_FRONT, GL_LINE);
}

void Reshape(int w, int h) {
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glFlush();
}

void KeyboardFunc(unsigned char key, int x, int y) {
	prevKey = key;
	if (key == 27) // escape
		exit(0);
	glutPostRedisplay();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitWindowSize(2 * dim, dim);
	glutInitWindowPosition(100, 100);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutCreateWindow(argv[0]);
	Init();
	glutReshapeFunc(Reshape);
	glutKeyboardFunc(KeyboardFunc);
	glutDisplayFunc(Display);
	glutMainLoop();
	return 0;
}